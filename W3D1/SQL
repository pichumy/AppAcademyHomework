SQL exercise 1

Find the title of each film

SELECT Title from Movies

Find the director of each film

SELECT Director from Movies

Find the title and director of each film

SELECT Title, Director from Movies

Find the title and year of each film

SELECT Title, Year from Movies

Find all the information about each film

SELECT * from Movies

Find the movie with a row id of 6

SELECT * FROM movies WHERE id == 6;

Find the movies released in the years between 2000 and 2010

SELECT * FROM movies WHERE Year BETWEEN 2000 AND 2010;

Find the movies not released in the years between 2000 and 2010

SELECT * FROM movies WHERE Year NOT BETWEEN 2000 AND 2010;

Find the first 5 Pixar movies and their release  year

SELECT title, year FROM movies WHERE year <= 2003;

Find all the Toy Story movies
SELECT * FROM movies WHERE Title LIKE "%Toy Story%";
Find all the movies directed by John Lasseter
SELECT * FROM movies WHERE Director == "John Lasseter";
Find all the movies (and director) not directed by John Lasseter
SELECT * FROM movies WHERE Director != "John Lasseter";
Find all the WALL-* movies
SELECT * FROM movies WHERE Title LIKE "%WALL%";

List all directors of Pixar movies (alphabetically), without duplicates
SELECT DISTINCT Director FROM movies Order by Director ASC;
List the last four Pixar movies released (ordered from most recent to least)
SELECT DISTINCT * FROM movies Order by Year DESC Limit 4;
List the first five Pixar movies sorted alphabetically
SELECT title FROM movies ORDER BY title ASC LIMIT 5;
List the next five Pixar movies sorted alphabetically
SELECT title FROM movies ORDER BY title ASC LIMIT 5 OFFSET 5;

List all the Canadian cities and their populations
SELECT City, Population FROM north_american_cities WHERE Country == "Canada";
Order all the cities in the United States by their latitude from north to south
SELECT * FROM north_american_cities WHERE Country == "United States" ORDER BY Latitude DESC;
List all the cities west of Chicago, ordered from west to east
SELECT * FROM north_american_cities
WHERE  Longitude < -88
ORDER BY Longitude ASC;
List the two largest cities in Mexico (by population)
SELECT * FROM north_american_cities
WHERE  Country == "Mexico"
ORDER BY Population DESC
LIMIT 2;
List the third and fourth largest cities (by population) in the United States and their population
SELECT City, Population FROM north_american_cities
WHERE  Country == "United States"
ORDER BY Population DESC
LIMIT 2 OFFSET 2;

Find the domestic and international sales for each movie
SELECT * FROM movies
JOIN Boxoffice
WHERE id == Movie_id
ORDER BY ID ;
Show the sales numbers for each movie that did better internationally rather than domestically
SELECT * FROM movies
JOIN Boxoffice
WHERE id == Movie_id AND Domestic_sales < International_sales
ORDER BY ID ;
List all the movies by their ratings in descending order
SELECT * FROM movies
JOIN Boxoffice
WHERE id == Movie_id
ORDER BY RATING DESC;


Find the list of all buildings that have employees
SELECT DISTINCT building FROM employees;
Find the list of all buildings and their capacity
SELECT * FROM Buildings;
List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT DISTINCT Building_name, Role FROM Buildings
LEFT JOIN employees
    ON Building_name = Building
;

Find the name and role of all employees who have not been assigned to a building
SELECT Name, Role FROM employees
WHERE Building IS NULL
;
Find the names of the buildings that hold no employees
SELECT * FROM Buildings
LEFT JOIN Employees
    ON Building_name == Building
WHERE Building IS NULL
;

List all movies and their combined sales in millions of dollars
SELECT Title, ((Domestic_sales + International_sales)/1000000) AS Sales FROM movies
JOIN Boxoffice
    ON id == Movie_id
;
List all movies and their ratings in percent
SELECT Title, (Rating * 10) AS Rating FROM movies
JOIN Boxoffice
    ON id == Movie_id
;
List all movies that were released on even number years
SELECT Title, Year FROM movies
JOIN Boxoffice
    ON id == Movie_id
WHERE Year % 2 == 0
;

Find the longest time that an employee has been at the studio
SELECT MAX(Years_employed) FROM employees;
For each role, find the average number of years employed by employees in that role
SELECT Role, AVG(years_employed) as Average_Employment_Duration
FROM employees
GROUP BY Role;
Find the total number of employee years worked in each building
Select Building, Sum(Years_employed) as Total_Years_Each_building From Employees
GROUP BY Building;

Find the number of Artists in the studio (without a HAVING clause)
SELECT COUNT(ROLE) as Artists FROM employees
WHERE Role == "Artist"
;
Find the number of Employees of each role in the studio
SELECT Role, COUNT(ROLE) as Artists FROM employees
GROUP BY Role
;
Find the total number of years employed by all Engineers
SELECT SUM(Years_employed)  FROM employees
WHERE Role == "Engineer"

;

Find the number of movies each director has directed
SELECT Director, COUNT(Director) AS Number_Directed FROM movies
GROUP BY Director
;
Find the total domestic and international sales that can be attributed to each director
SELECT director, SUM(domestic_sales + international_sales) as Cumulative_sales_from_all_movies
FROM movies
    INNER JOIN boxoffice
        ON movies.id = boxoffice.movie_id
GROUP BY director;
